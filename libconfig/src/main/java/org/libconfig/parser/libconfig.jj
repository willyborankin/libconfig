options {
  JDK_VERSION = "1.5";

  static = false;

  UNICODE_INPUT = true;

}

PARSER_BEGIN(ConfigParser)

package org.libconfig.parser;

import java.io.*;

import java.util.List;
import java.util.ArrayList;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.libconfig.Setting;
import org.libconfig.Config;
import org.libconfig.parser.ParserContext;

public class ConfigParser {

	private ParserContext parserCtx;
  
}

PARSER_END(ConfigParser)

SKIP : {
  " " | "\t" | "\n" | "\r" | "\f" 
}

/* Comments */
MORE : {
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
  | "/*" : IN_MULTI_LINE_COMMENT
}

SPECIAL_TOKEN : {
  <SINGLE_LINE_COMMENT: ("//" | "#") (~["\n", "\r"])* ("\n" | "\r" | "\r\n")?>
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN : {
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN : {
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE : {
  < ~[] >
}

/* Types tokens */
TOKEN: {
  < BOOLEAN_TOKEN: < TRUE_VALUE > | < FALSE_VALUE > >
	  | < #TRUE_VALUE: (["T", "t","R", "r","U","u","E", "e"]){4}>
	  | < #FALSE_VALUE: (["F", "f", "A", "a", "L", "l", "S", "s","E", "e"]){5}>
  | 
  < INTEGER_TOKEN: <DECIMAL_LITERAL> >
	  | < #DECIMAL_LITERAL: ((["-", "+"]) ? ["0"-"9"])+ >
  |
  <HEX_INTEGER: <HEX_LITERAL> > 
	  | < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
  |
  < FLOATING_POINT_TOKEN: <DECIMAL_FLOATING_POINT_TOKEN> >
	  | < #DECIMAL_FLOATING_POINT_TOKEN:
	      (["0"-"9"])+ "." (["0"-"9"])* (<DECIMAL_EXPONENT>)? 
	      | "." (["0"-"9"])+ (<DECIMAL_EXPONENT>)?
	      | (["0"-"9"])+ <DECIMAL_EXPONENT> 
	      | (["0"-"9"])+ (<DECIMAL_EXPONENT>)>
	  |  < #DECIMAL_EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
  |
  < STRING_TOKEN:
  	"\""
    (   (~["\"","\\","\n","\r"])
      | ("\\"
          ( ["n","t","b","r","f","\\","'","\""]
          | ["0"-"7"] ( ["0"-"7"] )?
          | ["0"-"3"] ["0"-"7"] ["0"-"7"]
          )
        )
    )*
    "\""
  >
  |
  < NAME_TOKEN: < NAME_TOKEN_LITERAL > >
	  | < #NAME_TOKEN_LITERAL: ( (< ONLY_LETTERS_AND_NUMBERS_AND_UNDERSCORE >)+ ("-")? (< ONLY_LETTERS_AND_NUMBERS_AND_UNDERSCORE >)? )+>
	  |  < #ONLY_LETTERS_AND_NUMBERS_AND_UNDERSCORE: ["A"-"Z", "a"-"z", "_", "0"-"9"]>

}

/** Separators token */
TOKEN : {
  < LPAREN: "(" > | < RPAREN: ")" >
  | < LBRACE: "{" > | < RBRACE: "}" >
  | < LBRACKET: "[" > | < RBRACKET: "]" >
  | < SEMICOLON: ";" >
  | < COLON: ":" >
  | < COMMA: "," >
  | < EQUALS: "=" >
}

/** Parser */
public Config buildConfiguration() : {
  	parserCtx = new ParserContext(new Config());
} {
  	[ setting() (setting())* ] <EOF>
  	{ return parserCtx.getConfig(); }
}

private void setting() : {} {
  <NAME_TOKEN> { String name = token.image; }
  (<COLON> | <EQUALS>) value(name) (<SEMICOLON> | <COMMA> | {})
}

private void valueList(String name) : {} {
  	[ value(name) (LOOKAHEAD(1) <COMMA> value(name))* ]
} 

private void value(String name) : { } {
   scalarValue(name, null)
   | arrayValue(name)
   | listValue(name)
   | groupValue(name)
}

private void scalarValueList(String name, List<Object> values) : { } {
  	[ scalarValue(name, values) (LOOKAHEAD(1) <COMMA> scalarValue(name, values))* ]
}

private void scalarValue(String name, List<Object> values) : { } {
  	<BOOLEAN_TOKEN> {
  	  		Boolean booleanValue = Boolean.parseBoolean(token.image);
  	  		addValueOrSettings(name, booleanValue, values);
  	  	}
  	| <INTEGER_TOKEN> {
  	  		Integer integerValue = Integer.parseInt(token.image);
  	  		addValueOrSettings(name, integerValue, values);
  	 	}
  	| <HEX_INTEGER > {
  	  		String cuttedStringValue = token.image.substring(2, token.image.length());
  	  		Integer hexIntValue = Integer.parseInt(cuttedStringValue, 16);
  	  		addValueOrSettings(name, hexIntValue, values);
		}
  	| <FLOATING_POINT_TOKEN> {
  	  		Double doubleValue = Double.parseDouble(token.image);
  	  		addValueOrSettings(name, doubleValue, values);
  	  	}
  	| <STRING_TOKEN> {
  	  		String stringValue = token.image;
  	  		stringValue = stringValue.replaceAll("\"", "");
  	  		addValueOrSettings(name, stringValue, values);
  	  	}
}

private void addValueOrSettings(String name, Object value, List<Object> values): { } {
	{
	  if (values != null) {
  		  values.add(value);
  	  } else {
  	 	  parserCtx.addScalarSetting(name, value);
  	  }
 	}	 
}

private void arrayValue(String name) : {
  	ArrayList<Object> values = new ArrayList<Object>();
} {
  	<LBRACKET> scalarValueList(null, values) <RBRACKET>
  	{ parserCtx.addArraySetting(name, values.toArray(new Object[values.size()])); }
}

private void listValue(String name) : {
  	Setting listSetting = parserCtx.addListSetting(name);
  	parserCtx.setParent(listSetting);
} {
	<LPAREN> valueList(null) <RPAREN>
   { parserCtx.setParent(listSetting.getParent()); }
}

private void groupValue(String name) : {
  	Setting groupSetting = parserCtx.addGroupSetting(name);
  	parserCtx.setParent(groupSetting);
} {
	<LBRACE> [ setting() (setting())* ] <RBRACE>
   { parserCtx.setParent(groupSetting.getParent()); }
}


